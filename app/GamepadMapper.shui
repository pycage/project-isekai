require "shellfish/ui";

Object {

    async function mapButtons()
    {
        const mapping = { };

        let aborted = false;

        const dlg = showMessageDialog("Setup Controller", "input-gamecontroller", "", [
            { label: "Cancel", callback: () => { aborted = true; } }
        ]);

        let inputs = [
            { key: "up", name: "Up", axis: true },
            { key: "dpadUp", name: "Up" },
            { key: "dpadDown", name: "Down" },
            { key: "left", name: "Left", axis: true },
            { key: "dpadLeft", name: "Left" },
            { key: "dpadRight", name: "Right" },
            { key: "jump", name: "Jump" },
            { key: "look", name: "Look Around" },
            { key: "run", name: "Run" },
            { key: "strafeLeft", name: "Strafe Left" },
            { key: "strafeRight", name: "Strafe Right" }
        ];


        const setMapping = (key, index) =>
        {
            mapping[key] = index;
            inputs = inputs.filter(item => item.key !== key);
        };

        const waitForInput = async () =>
        {
            let resultType = "";
            let result = -1;

            let axes = gamePad.axes;
            let buttons = gamePad.buttons;

            // wait for pressed
            while (true)
            {
                const axisIdx = gamePad.axes.findIndex(a => Math.abs(a) > 0.3);
                const buttonIdx = gamePad.buttons.findIndex(a => a);
                console.log(axisIdx + " " + JSON.stringify(gamePad.axes));
                console.log(buttonIdx + " " + JSON.stringify(gamePad.buttons));

                if (aborted)
                {
                    break;
                }
                else if (axisIdx !== -1)
                {
                    resultType = "axis";
                    result = axisIdx;
                    break;
                }
                else if (buttonIdx !== -1)
                {
                    resultType = "button";
                    result = buttonIdx;
                    break;
                }

                await wait(50);
            }

            // wait for released
            while (! aborted)
            {
                const axisIdx = gamePad.axes.findIndex(a => Math.abs(a) > 0.3);
                const buttonIdx = gamePad.buttons.findIndex(a => a);

                if (axisIdx === -1 && buttonIdx === -1)
                {
                    break;
                }

                await wait(50);
            }

            return { type: resultType, index: result };
        };


        while (inputs.length > 0) 
        {
            const key = inputs[0].key;
            const name = inputs[0].name;

            dlg.message = "Press input for [" + name + "].";
            const result = await waitForInput();
            if (aborted)
            {
                break;
            }

            setMapping(key, result.index);

            if (key === "up")
            {
                if (result.type === "axis")
                {
                    setMapping("up", result.index);
                    setMapping("dpadUp", -1);
                    setMapping("dpadDown", -1);
                }
                else
                {
                    setMapping("up", -1);
                    setMapping("dpadUp", result.index);
                }

            }
            if (key === "left")
            {
                if (result.type === "axis")
                {
                    setMapping("left", result.index);
                    setMapping("dpadLeft", -1);
                    setMapping("dpadRight", -1);
                }
                else
                {
                    setMapping("left", -1);
                    setMapping("dpadLeft", result.index);
                }
            }
        }

        if (! aborted)
        {
            dlg.close();
        }

        console.log(JSON.stringify(mapping));
        return aborted ? null : mapping;
    }

    Gamepad { id: gamePad }
}
